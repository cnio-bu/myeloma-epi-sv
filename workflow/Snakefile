import os


configfile: "config/config.yaml"


def get_resource(rule, resource):
    try:
        return config["resources"][rule][resource]
    except KeyError:
        return config["resources"]["default"][resource]


try:
    config["paths"]["models"] = os.environ["ONT_BC_MODELS"]
except KeyError:
    pass


def input_main(wc):
    o = []
    for sid in config["samples"]:
        for bc in config["basecallers"]:
            for mod in config["basecallers"][bc]["models"]:
                for filt in config["filters"]:
                    o.append(f"results/pycoqc/{sid}/{bc}-{mod}.html")
                    for ref in config["paths"]["references"]:
                        o.append(f"results/primary/{sid}/{ref}/dorado-{mod}-{filt}.bam")
    return o


rule main:
    input:
        input_main,


rule basecall_dorado:
    input:
        lambda wc: config["samples"][wc.sampleid]["pod5"],
    output:
        "results/basecall/{sampleid}/dorado-{model}.bam",
    log:
        "logs/basecall_dorado/{sampleid}/dorado-{model}.log",
    benchmark:
        "logs/basecall_dorado/{sampleid}/dorado-{model}.bmk"
    params:
        bin=config["basecallers"]["dorado"]["bin"],
        modelspath=config["paths"]["models"],
    threads: get_resource("basecall_dorado", "threads")
    resources:
        mem_mb=get_resource("basecall_dorado", "mem_mb"),
        runtime=get_resource("basecall_dorado", "runtime"),
        slurm_partition=get_resource("basecall_dorado", "partition"),
        slurm_extra=get_resource("basecall_dorado", "slurm_extra"),
    shell:
        """
        {params.bin} basecaller {params.modelspath}/{wildcards.model} {input} > {output} 2> {log}
    """


rule summary_dorado:
    input:
        "results/basecall/{sampleid}/dorado-{model}.bam",
    output:
        temp("results/summary_dorado/{sampleid}/dorado-{model}.txt"),
    log:
        "logs/summary_dorado/{sampleid}/dorado-{model}.log",
    benchmark:
        "logs/summary_dorado/{sampleid}/dorado-{model}.bmk"
    params:
        bin=config["basecallers"]["dorado"]["bin"],
    threads: get_resource("summary_dorado", "threads")
    resources:
        mem_mb=get_resource("summary_dorado", "mem_mb"),
        runtime=get_resource("summary_dorado", "runtime"),
        slurm_partition=get_resource("summary_dorado", "partition"),
        slurm_extra=get_resource("summary_dorado", "slurm_extra"),
    shell:
        """
        {params.bin} summary {input} >> {output} 2> {log}
    """


rule pycoqc:
    input:
        "results/summary_dorado/{sampleid}/dorado-{model}.txt",
    output:
        "results/pycoqc/{sampleid}/{basecaller}-{model}.html",
    log:
        "logs/pycoqc/{sampleid}/{basecaller}-{model}.log",
    benchmark:
        "logs/pycoqc/{sampleid}/{basecaller}-{model}.bmk"
    threads: get_resource("pycoqc", "threads")
    conda:
        "envs/pycoqc.yaml"
    resources:
        mem_mb=get_resource("pycoqc", "mem_mb"),
        runtime=get_resource("pycoqc", "runtime"),
        slurm_partition=get_resource("pycoqc", "partition"),
        slurm_extra=get_resource("pycoqc", "slurm_extra"),
    shell:
        """
       pycoQC -f {input} -o {output} 2>&1 > {log}
    """


def getcmp(wc):
    if wc.cmp == "ge":
        return ">="
    elif wc.cmp == "gt":
        return ">"
    elif wc.cmp == "le":
        return "<="
    elif wc.cmp == "lt":
        return "<"
    else:
        raise ValueError(f"Operator {wc.cmp} not recognised")

rule qsfilter:
    input:
        "results/basecall/{sampleid}/{basecaller}-{model}.bam",
    output:
        "results/qsfilter/{sampleid}/{basecaller}-{model}-{cmp}-{qscore}.bam",
    log:
        "logs/qsfilter/{sampleid}/{basecaller}-{model}-{cmp}-{qscore}.log",
    benchmark:
        "logs/qsfilter/{sampleid}/{basecaller}-{model}-{cmp}-{qscore}.bmk"
    params:
        cmp=getcmp,
        qscore=lambda wc: wc.qscore.lstrip("0"),
    threads: get_resource("qsfilter", "threads")
    resources:
        mem_mb=get_resource("qsfilter", "mem_mb"),
        runtime=get_resource("qsfilter", "runtime"),
        slurm_partition=get_resource("qsfilter", "partition"),
    conda:
        "envs/samtools.yaml"
    shell:
        """
        samtools view -e '[qs]{params.cmp}{params.qscore}' {input} > {output} 2> {log}
    """


rule minimap2:
    input:
        reads="results/qsfilter/{sampleid}/{basecaller}-{model}-{cmp}-{qscore}.bam",
        ref=lambda wc: config["paths"]["references"][wc.ref],
    output:
        "results/minimap2/{sampleid}/{ref}/{basecaller}-{model}-{cmp}-{qscore}.bam",
    log:
        "logs/minimap2/{sampleid}/{ref}/{basecaller}-{model}-{cmp}-{qscore}.log",
    benchmark:
        "logs/minimap2/{sampleid}/{ref}/{basecaller}-{model}-{cmp}-{qscore}.bmk"
    threads: get_resource("minimap2", "threads")
    resources:
        mem_mb=get_resource("minimap2", "mem_mb"),
        runtime=get_resource("minimap2", "runtime"),
        slurm_partition=get_resource("minimap2", "partition"),
    conda:
        "envs/samtools.yaml"
    params:
        bin=config["basecallers"]["dorado"]["bin"]
    shell:
        """
        {params.bin} aligner -t {threads} {input.ref} {input.reads} | samtools sort -@ {threads} -o {output} 2> {log}
        samtools index {output}
    """

rule primary:
    input:
        "results/minimap2/{sampleid}/{ref}/{basecaller}-{model}-{cmp}-{qscore}.bam",
    output:
        "results/primary/{sampleid}/{ref}/{basecaller}-{model}-{cmp}-{qscore}.bam",
    log:
        "logs/primary/{sampleid}/{ref}/{basecaller}-{model}-{cmp}-{qscore}.log",
    benchmark:
        "logs/primary/{sampleid}/{ref}/{basecaller}-{model}-{cmp}-{qscore}.bmk"
    threads: lambda wc: get_resource("primary", "threads")/2
    resources:
        mem_mb=get_resource("primary", "mem_mb"),
        runtime=get_resource("primary", "runtime"),
        slurm_partition=get_resource("primary", "partition"),
    conda:
        "envs/samtools.yaml"
    shell:
        """
        samtools view -@ {threads} -F 2308 -b {input} | samtools sort -@ {threads} -o {output} 2> {log}
        samtools index {output}
    """
